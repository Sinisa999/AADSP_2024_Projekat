#include "obrada.h"
#include "haos.h"
#include <cmath>
#include <cstring>
#include <iostream>
#include <ostream>
#include <xtensa/tie/xt_hifi4.h>



#define NUMBER_OF_COEFFS 128
#define NUMBER_OF_COEFFS_BPF 256


#define FRONT_LEFT    0x01  // Bit 0
#define FRONT_RIGHT   0x02  // Bit 1
#define FRONT_CENTER  0x04  // Bit 2
#define SURROUND_LEFT 0x08  // Bit 3
#define SURROUND_RIGHT 0x10 // Bit 4
#define SUBWOOFER     0x20  // Bit 5


double sampleBufferInput[MAX_NUM_CHANNELS][BRICK_SIZE];
double tempBufferL_BPF[MAX_NUM_CHANNELS][BRICK_SIZE];
double tempBufferLFE_LPF[MAX_NUM_CHANNELS][BRICK_SIZE];
double addBuffer[MAX_NUM_CHANNELS][BRICK_SIZE];
double tempBuffer[MAX_NUM_CHANNELS][BRICK_SIZE];

double history1[NUMBER_OF_COEFFS] = { 0 };
double history2[NUMBER_OF_COEFFS_BPF] = { 0 };




extern int nInputChannels;
extern int samplesPerChannel;
extern int bitsPerSample;
extern int sampleRate;

struct {
    unsigned int ObradaEnable;
	double InputGain;
	unsigned int Mode;
	unsigned int OutputMode;
} Obrada_mcv=
{
    1,
	-6,
	1,
	0x3B	//Default "2_0_0"
};

HAOS_Mct_t Obrada_mct =
{
    	0,
		0,
		0,
		0,
		Obrada_brickFunction,
		0,
		0,
		0,
		0
};

HAOS_Mif_t Obrada_mif = {
    &Obrada_mcv,
    &Obrada_mct
};

HAOS_Odt_t Obrada_odt = 
{
	&Obrada_mif,
	0x20,
	ODT_END
};

HAOS_OdtEntry_t *Obrada_odtPtr = Obrada_odt;

double dbGain = -6;

typedef struct {
	char outputMode[16];  // "2_0_0", "2_0_1, ..."
	int channelMask;
} OutputModeMapping;

const OutputModeMapping modeMappings[] = {
	{ "2_0_0", FRONT_LEFT | FRONT_RIGHT },
	{ "2_0_1", FRONT_LEFT | FRONT_RIGHT | SUBWOOFER },
	{ "2_2_0", FRONT_LEFT | FRONT_RIGHT | SURROUND_LEFT | SURROUND_RIGHT },
	{ "2_2_1", FRONT_LEFT | FRONT_RIGHT | SURROUND_LEFT | SURROUND_RIGHT | SUBWOOFER }
};

int getChannelMask(const char* mode) {
	for (int i = 0; i < sizeof(modeMappings) / sizeof(modeMappings[0]); i++) {
		if (strcmp(mode, modeMappings[i].outputMode) == 0) {
			return modeMappings[i].channelMask;
		}
	}
	printf("Error: Unsupported OutputMode '%s'.\n", mode);
	return 0;
}

double convertGain(double dbGain) {
	return pow(10.0, dbGain / 20.0);
}

//FIR filter
double fir_basic(double input, double* coeffs, double *history, unsigned int n_coeff)
{
	int i;
	double ret_val = 0;

	/* shift delay line */
	for (i = n_coeff - 2; i >= 0; i--)
	{
		history[i + 1] = history[i];
	}

	/* store input at the beginning of the delay line */
	history[0] = input;


	/* calc FIR */
	for (i = 0; i < n_coeff; i++)
	{
		ret_val += coeffs[i] * history[i];
	}

	return ret_val;
}

//Inverter
typedef struct {
	double degree;
	double gain;
} inverter_data_t;

void audio_invert_init(inverter_data_t * data, double degree, double gain)
{
	data->degree = degree;
	data->gain = gain;
}

static void gst_audio_invert_transform(inverter_data_t* data, double* input, double* output, unsigned int num_samples)
{
	int i;
	double dry = 1.0 - data->degree;
	double val;

	for (i = 0; i < num_samples; i++) {
		val = input[i] * dry - input[i] * data->degree;
		output[i] = val * data->gain;
	}
}

double coeffs1[NUMBER_OF_COEFFS] = {

	0.00066862033731050947,
	0.00079110178502267187,
	0.00092043247285417010,
	0.00105670897662588800,
	0.00120001700201010830,
	0.00135043070771806630,
	0.00150801202528707540,
	0.00167280997671373350,
	0.00184485999123181880,
	0.00202418322257612480,
	0.00221078586811111750,
	0.00240465849125230710,
	0.00260577534864279290,
	0.00281409372358528170,
	0.00302955326726346610,
	0.00325207534932263040,
	0.00348156241940154050,
	0.00371789738123682460,
	0.00396094298098610770,
	0.00421054121143310100,
	0.00446651273376439190,
	0.00472865631863015820,
	0.00499674830823151980,
	0.00527054210120375160,
	0.00554976766210507010,
	0.00583413105735017430,
	0.00612331401944664000,
	0.00641697354139424660,
	0.00671474150306418040,
	0.00701622433127995200,
	0.00732100269517236420,
	0.00762863123816612250,
	0.00793863834772588590,
	0.00825052596378516270,
	0.00856376942671875290,
	0.00887781736589836680,
	0.00919209163045310580,
	0.00950598726492419940,
	0.00981887253407914310,
	0.01013008900307143600,
	0.01043895168097681000,
	0.01074474923675821900,
	0.01104674429581132600,
	0.01134417382105892500,
	0.01163624957372384900,
	0.01192215863446613300,
	0.01220106394571862100,
	0.01247210481303054700,
	0.01273439728239166700,
	0.01298703430134764800,
	0.01322908558851625100,
	0.01345959719790211500,
	0.01367759089365257900,
	0.01388206367072696200,
	0.01407198808664012400,
	0.01424631451941508900,
	0.01440397703651351800,
	0.01454390524992650400,
	0.01466504541645759900,
	0.01476639556576830900,
	0.01484706384137623100,
	0.01490637890085468000,
	0.01494420872639164700,
	0.01496443491509552900,
	0.01494420872639164700,
	0.01490637890085468000,
	0.01484706384137623100,
	0.01476639556576830900,
	0.01466504541645759900,
	0.01454390524992650400,
	0.01440397703651351800,
	0.01424631451941508900,
	0.01407198808664012400,
	0.01388206367072696200,
	0.01367759089365257900,
	0.01345959719790211500,
	0.01322908558851625100,
	0.01298703430134764800,
	0.01273439728239166700,
	0.01247210481303054700,
	0.01220106394571862100,
	0.01192215863446613300,
	0.01163624957372384900,
	0.01134417382105892500,
	0.01104674429581132600,
	0.01074474923675821900,
	0.01043895168097681000,
	0.01013008900307143600,
	0.00981887253407914310,
	0.00950598726492419940,
	0.00919209163045310580,
	0.00887781736589836680,
	0.00856376942671875290,
	0.00825052596378516270,
	0.00793863834772588590,
	0.00762863123816612250,
	0.00732100269517236420,
	0.00701622433127995200,
	0.00671474150306418040,
	0.00641697354139424660,
	0.00612331401944664000,
	0.00583413105735017430,
	0.00554976766210507010,
	0.00527054210120375160,
	0.00499674830823151980,
	0.00472865631863015820,
	0.00446651273376439190,
	0.00421054121143310100,
	0.00396094298098610770,
	0.00371789738123682460,
	0.00348156241940154050,
	0.00325207534932263040,
	0.00302955326726346610,
	0.00281409372358528170,
	0.00260577534864279290,
	0.00240465849125230710,
	0.00221078586811111750,
	0.00202418322257612480,
	0.00184485999123181880,
	0.00167280997671373350,
	0.00150801202528707540,
	0.00135043070771806630,
	0.00120001700201010830,
	0.00105670897662588800,
	0.00092043247285417010,
	0.00079110178502267187,
	0.00066862033731050947,
	0.00055288135595360922

};

double coeffs2[NUMBER_OF_COEFFS_BPF] = {
	-0.00000000576743213321,
	-0.00000001739682695523,
	-0.00000003578481902758,
	-0.00000006172158671291,
	-0.00000009583461689078,
	-0.00000013852630231384,
	-0.00000018990619976054,
	-0.00000024971913643416,
	-0.00000031727071700754,
	-0.00000039135218953873,
	-0.00000047016702789624,
	-0.00000055126204079783,
	-0.00000063146622245314,
	-0.00000070684096448123,
	-0.00000077264566596232,
	-0.00000082332305903540,
	-0.00000085250888620840,
	-0.00000085307072382698,
	-0.00000081718081195445,
	-0.00000073642773294115,
	-0.00000060197151947972,
	-0.00000040474642187138,
	-0.00000013571495135110,
	0.00000021382399949790,
	0.00000065187122328675,
	0.00000118530703832898,
	0.00000181941609702774,
	0.00000255736023203004,
	0.00000339960459866757,
	0.00000434330478060076,
	0.00000538166527971589,
	0.00000650328270486519,
	0.00000769149015267304,
	0.00000892372253593991,
	0.00001017092599892206,
	0.00001139703792923669,
	0.00001255856736536308,
	0.00001360430871367697,
	0.00001447522442123787,
	0.00001510453463118919,
	0.00001541805350430307,
	0.00001533481287613863,
	0.00001476801389911265,
	0.00001362634617309036,
	0.00001181571148461815,
	0.00000924138525953011,
	0.00000581064328697958,
	0.00000143587376838679,
	-0.00000396181469034036,
	-0.00001044849010779757,
	-0.00001807281390938047,
	-0.00002686100822681955,
	-0.00003681142273686031,
	-0.00004788877051921593,
	-0.00006001812495482418,
	-0.00007307879411023428,
	-0.00008689821520012196,
	-0.00010124603918332377,
	-0.00011582860398763081,
	-0.00013028402366772665,
	-0.00014417814924214941,
	-0.00015700168402679049,
	-0.00016816876082251958,
	-0.00017701730877948567,
	-0.00018281155281209605,
	-0.00018474699659152232,
	-0.00018195824056710562,
	-0.00017352997892748658,
	-0.00015851150455117025,
	-0.00013593503006512124,
	-0.00010483810738540543,
	-0.00006429039728841290,
	-0.00001342500150817364,
	0.00004852548560932712,
	0.00012218813434297361,
	0.00020800410762703673,
	0.00030617862082334596,
	0.00041662696756608673,
	0.00053891748193067406,
	0.00067221266136669301,
	0.00081520996397932400,
	0.00096608390174156050,
	0.00112243085704311010,
	0.00128121748058261280,
	0.00143873263528633770,
	0.00159054188907295090,
	0.00173144303953652510,
	0.00185542181184544100,
	0.00195560950430804550,
	0.00202424948637168350,
	0.00205268683621423130,
	0.00203140347957671660,
	0.00195012669727048370,
	0.00179803694412088680,
	0.00156408606142383940,
	0.00123740511139317830,
	0.00080773281297364958,
	0.00026573990697846398,
	-0.00039691793347412774,
	-0.00118798404250842540,
	-0.00211550240791033570,
	-0.00318911972102341790,
	-0.00442135524121213450,
	-0.00582802325326149330,
	-0.00742666869823324640,
	-0.00923181901262934080,
	-0.01124632801306414000,
	-0.01344933345518531200,
	-0.01578345711405221600,
	-0.01814660243046564400,
	-0.02039630055573124500,
	-0.02237567045536624500,
	-0.02396784086813851000,
	-0.02517819137444251800,
	-0.02622978126250296400,
	-0.02763749689354240800,
	-0.03020457923971260600,
	-0.03486925305806740800,
	-0.04233122337329798400,
	-0.05242211340014890600,
	-0.06326263648113780700,
	-0.07037548311164393300,
	-0.06608192792768705100,
	-0.03966181992834781600,
	0.02116802281562235600,
	0.12699402416535427000,
	0.28155322530051674000,
	0.37086978430687656000,
	0.28155322530051674000,
	0.12699402416535427000,
	0.02116802281562235600,
	-0.03966181992834781600,
	-0.06608192792768705100,
	-0.07037548311164393300,
	-0.06326263648113780700,
	-0.05242211340014890600,
	-0.04233122337329798400,
	-0.03486925305806740800,
	-0.03020457923971260600,
	-0.02763749689354240800,
	-0.02622978126250296400,
	-0.02517819137444251800,
	-0.02396784086813851000,
	-0.02237567045536624500,
	-0.02039630055573124500,
	-0.01814660243046564400,
	-0.01578345711405221600,
	-0.01344933345518531200,
	-0.01124632801306414000,
	-0.00923181901262934080,
	-0.00742666869823324640,
	-0.00582802325326149330,
	-0.00442135524121213450,
	-0.00318911972102341790,
	-0.00211550240791033570,
	-0.00118798404250842540,
	-0.00039691793347412774,
	0.00026573990697846398,
	0.00080773281297364958,
	0.00123740511139317830,
	0.00156408606142383940,
	0.00179803694412088680,
	0.00195012669727048370,
	0.00203140347957671660,
	0.00205268683621423130,
	0.00202424948637168350,
	0.00195560950430804550,
	0.00185542181184544100,
	0.00173144303953652510,
	0.00159054188907295090,
	0.00143873263528633770,
	0.00128121748058261280,
	0.00112243085704311010,
	0.00096608390174156050,
	0.00081520996397932400,
	0.00067221266136669301,
	0.00053891748193067406,
	0.00041662696756608673,
	0.00030617862082334596,
	0.00020800410762703673,
	0.00012218813434297361,
	0.00004852548560932712,
	-0.00001342500150817364,
	-0.00006429039728841290,
	-0.00010483810738540543,
	-0.00013593503006512124,
	-0.00015851150455117025,
	-0.00017352997892748658,
	-0.00018195824056710562,
	-0.00018474699659152232,
	-0.00018281155281209605,
	-0.00017701730877948567,
	-0.00016816876082251958,
	-0.00015700168402679049,
	-0.00014417814924214941,
	-0.00013028402366772665,
	-0.00011582860398763081,
	-0.00010124603918332377,
	-0.00008689821520012196,
	-0.00007307879411023428,
	-0.00006001812495482418,
	-0.00004788877051921593,
	-0.00003681142273686031,
	-0.00002686100822681955,
	-0.00001807281390938047,
	-0.00001044849010779757,
	-0.00000396181469034036,
	0.00000143587376838679,
	0.00000581064328697958,
	0.00000924138525953011,
	0.00001181571148461815,
	0.00001362634617309036,
	0.00001476801389911265,
	0.00001533481287613863,
	0.00001541805350430307,
	0.00001510453463118919,
	0.00001447522442123787,
	0.00001360430871367697,
	0.00001255856736536308,
	0.00001139703792923669,
	0.00001017092599892206,
	0.00000892372253593991,
	0.00000769149015267304,
	0.00000650328270486519,
	0.00000538166527971589,
	0.00000434330478060076,
	0.00000339960459866757,
	0.00000255736023203004,
	0.00000181941609702774,
	0.00000118530703832898,
	0.00000065187122328675,
	0.00000021382399949790,
	-0.00000013571495135110,
	-0.00000040474642187138,
	-0.00000060197151947972,
	-0.00000073642773294115,
	-0.00000081718081195445,
	-0.00000085307072382698,
	-0.00000085250888620840,
	-0.00000082332305903540,
	-0.00000077264566596232,
	-0.00000070684096448123,
	-0.00000063146622245314,
	-0.00000055126204079783,
	-0.00000047016702789624,
	-0.00000039135218953873,
	-0.00000031727071700754,
	-0.00000024971913643416,
	-0.00000018990619976054,
	-0.00000013852630231384,
	-0.00000009583461689078,
	-0.00000006172158671291,
	-0.00000003578481902758,
	-0.00000001739682695523,
	-0.00000000576743213321,
	0.00000000000000031147
};

void __fg_call Obrada_preKickFunction(void* Obrada_mifPtr){
	std::cout << "start Obrada PREKICK" << std::endl;

	std::cout << "end Obrada PREKICK" << std::endl;
}

void __fg_call Obrada_postKickFunction(){
	std::cout << "start Obrada POSTKICK" << std::endl;

	std::cout << "end Obrada POSTKICK" << std::endl;
}

void __fg_call Obrada_brickFunction()
{
    std::cout << "start brick OBRADA" << std::endl;
	std::cout << "OutMode value: " << Obrada_mcv.OutputMode << std::endl;
	std::cout << "InputGain value: " << Obrada_mcv.InputGain << std::endl;

	

	
	int channelMask = Obrada_mcv.OutputMode;

	std::cout << "channelMask value: " << channelMask << std::endl;

	//double dbGain = -6;
	double gain = convertGain(Obrada_mcv.InputGain);





	if (!Obrada_mcv.ObradaEnable) {
		return;
	}

	inverter_data_t inverterData;
	audio_invert_init(&inverterData, /* degree */ 0.8, /* gain */ 1.0);

	//reading data
	for(int i = 0; i < MAX_NUM_CHANNELS; i++)
	{
		for(int j = 0; j < BRICK_SIZE; j++)
		{
			sampleBufferInput[i][j] = __HAOS_IOBUFFER_PTRS[i][j];
			sampleBufferInput[i][j] *= gain;

		}
	}

	//proccessing

	for(int i = 0; i < BRICK_SIZE; i++)
	{
			addBuffer[3][i] = sampleBufferInput[0][i] * 0.25 + sampleBufferInput[0][i] * 0.5;
			tempBufferLFE_LPF[5][i] = fir_basic(sampleBufferInput[0][i], coeffs1, history1, NUMBER_OF_COEFFS);
			addBuffer[5][i] = tempBufferLFE_LPF[5][i] * 1.41 + tempBufferLFE_LPF[5][i] * 1.78;
			tempBufferL_BPF[0][i] = fir_basic(sampleBufferInput[0][i], coeffs2, history2, NUMBER_OF_COEFFS);
			addBuffer[0][i] = addBuffer[3][i] + addBuffer[5][i] + tempBufferL_BPF[0][i];
			//addBuffer[0][i] = tempBufferL_BPF[0][1];
			gst_audio_invert_transform(&inverterData, sampleBufferInput[1], addBuffer[4], BRICK_SIZE);
			addBuffer[1][i] = sampleBufferInput[1][i];
			tempBuffer[0][i] = addBuffer[0][i];
			tempBuffer[1][i] = addBuffer[1][i];
			tempBuffer[3][i] = addBuffer[3][i];
			tempBuffer[4][i] = addBuffer[4][i];
			tempBuffer[5][i] = addBuffer[5][i];

	}
	

	//writing to IO buffers
	int outputChannel = 0; // Index for writing to __HAOS_IOBUFFER_PTRS
	int maskOut = channelMask;
	std::cout << "maskOut value: " << maskOut << std::endl;

	while (maskOut != 0) {
		if (maskOut & 1) { // Check if the channel is enabled by the mask
			for (int j = 0; j < BRICK_SIZE; j++) {
				__HAOS_IOBUFFER_PTRS[outputChannel][j] = tempBuffer[outputChannel][j];
			}
		}
		outputChannel++; // Increment tempBuffer channel
		maskOut >>= 1;   // Shift mask to check the next channel
	}



	std::cout << "end brick OBRADA" << std::endl;

}




